{
  "models": [
    {
      "title": "Llama 3.1 70B (Best Overall)",
      "provider": "ollama",
      "model": "llama3.1:70b",
      "apiBase": "http://localhost:11434"
    },
    {
      "title": "CodeLlama 70B (Code Specialist)",
      "provider": "ollama", 
      "model": "codellama:70b",
      "apiBase": "http://localhost:11434"
    },
    {
      "title": "DeepSeek Coder 33B (Fast & Smart)",
      "provider": "ollama",
      "model": "deepseek-coder:33b",
      "apiBase": "http://localhost:11434"
    },
    {
      "title": "Qwen2.5 Coder 32B (Very Fast)",
      "provider": "ollama",
      "model": "qwen2.5-coder:32b", 
      "apiBase": "http://localhost:11434"
    },
    {
      "title": "Llama 3.1 8B (Ultra Fast)",
      "provider": "ollama",
      "model": "llama3.1:8b",
      "apiBase": "http://localhost:11434"
    },
    {
      "title": "CodeLlama 13B (Balanced)",
      "provider": "ollama",
      "model": "codellama:13b",
      "apiBase": "http://localhost:11434"
    }
  ],
  "customCommands": [
    {
      "name": "cursor-agent",
      "prompt": "You are an autonomous coding agent with intelligent model selection. Before proceeding with any task, I'll analyze the complexity and recommend the optimal model:\n\n**MODEL RECOMMENDATIONS:**\n- **üß† Llama 3.1 70B**: Complex reasoning, architectural decisions, multi-file refactoring\n- **‚ö° CodeLlama 70B**: Code generation, writing functions/classes, code-specific tasks\n- **üîç DeepSeek Coder 33B**: Debugging, code analysis, problem-solving\n- **üöÄ Qwen2.5 Coder 32B**: Fast iterations, quick fixes, moderate complexity\n- **‚ö° Llama 3.1 8B**: Ultra-fast responses, simple queries, quick completions\n\n**SMART WORKFLOW:**\n1. I analyze your task complexity and type\n2. I recommend the optimal model for this specific task\n3. You switch to the recommended model (one click)\n4. I proceed with the task using the model's strengths\n\n**CAPABILITIES:**\n- Analyze codebases and understand project structure\n- Generate complete functions, classes, and modules\n- Refactor code across multiple files\n- Debug complex issues systematically\n- Write comprehensive test suites\n- Execute terminal commands and build tools\n- Update documentation and create guides\n\nI'll provide context-aware solutions that fit your project's architecture and use existing patterns. Ready to analyze your task and recommend the best model!",
      "description": "Smart autonomous agent with intelligent model selection"
    },
    {
      "name": "smart-code-gen",
      "prompt": "For code generation tasks, I recommend **CodeLlama 70B** - it's specialized for writing high-quality code. Please switch to CodeLlama 70B, then I'll:\n\n- Write complete functions and classes\n- Follow your project's coding patterns\n- Include proper error handling\n- Add appropriate comments\n- Consider dependencies and imports\n\nWhat code would you like me to generate?",
      "description": "Code generation with CodeLlama 70B recommendation"
    },
    {
      "name": "smart-debug",
      "prompt": "For debugging and analysis, I recommend **DeepSeek Coder 33B** - it excels at problem-solving and code analysis. Please switch to DeepSeek Coder 33B, then I'll:\n\n- Analyze error messages and stack traces\n- Trace execution flow and identify root causes\n- Propose multiple solution approaches\n- Implement fixes with proper error handling\n- Add safeguards to prevent similar issues\n\nWhat debugging challenge are you facing?",
      "description": "Debugging with DeepSeek Coder 33B recommendation"
    },
    {
      "name": "smart-refactor",
      "prompt": "For complex refactoring, I recommend **Llama 3.1 70B** - it's best for architectural decisions and multi-file changes. Please switch to Llama 3.1 70B, then I'll:\n\n- Analyze current code structure\n- Plan comprehensive refactoring strategy\n- Implement changes across multiple files\n- Update tests and documentation\n- Ensure backward compatibility\n- Optimize performance and maintainability\n\nWhat refactoring would you like me to tackle?",
      "description": "Refactoring with Llama 3.1 70B recommendation"
    },
    {
      "name": "quick-fix",
      "prompt": "For quick fixes and simple changes, I recommend **Qwen2.5 Coder 32B** - it's fast and efficient. Please switch to Qwen2.5 Coder 32B, then I'll:\n\n- Make targeted fixes quickly\n- Update specific functions or variables\n- Handle simple refactoring tasks\n- Provide rapid iterations\n\nWhat quick fix do you need?",
      "description": "Quick fixes with Qwen2.5 Coder 32B recommendation"
    },
    {
      "name": "explain-codebase",
      "prompt": "Analyze this codebase and provide a comprehensive explanation including:\n\n1. **Project Overview** - Purpose, main functionality, and architecture\n2. **Directory Structure** - How files are organized and why\n3. **Key Components** - Main modules, classes, and their responsibilities\n4. **Dependencies** - External libraries and frameworks used\n5. **Data Flow** - How information moves through the system\n6. **Configuration** - Important settings and environment variables\n7. **Deployment** - How the project is built and deployed\n8. **Development Workflow** - Scripts, commands, and development practices\n\nProvide insights that would help a new developer understand and contribute to this project effectively.",
      "description": "Get a comprehensive explanation of the entire codebase"
    },
    {
      "name": "refactor-project",
      "prompt": "Perform a comprehensive refactoring analysis and implementation. For the given task:\n\n1. **Analyze current code** - Identify areas for improvement\n2. **Plan refactoring** - Create a step-by-step improvement plan\n3. **Implement changes** - Make the actual code improvements\n4. **Update tests** - Ensure all tests still pass\n5. **Update documentation** - Reflect changes in docs\n\nFocus on:\n- Code organization and structure\n- Performance optimizations\n- Maintainability improvements\n- Modern best practices\n- Error handling\n- Type safety (if applicable)\n\nProvide before/after comparisons and explain the benefits of each change.",
      "description": "Comprehensive project refactoring with improvements"
    },
    {
      "name": "debug-issue",
      "prompt": "Debug and fix issues in the codebase. For any problems:\n\n1. **Identify the root cause** - Analyze error messages, logs, and symptoms\n2. **Trace execution flow** - Understand how the code reaches the problematic state\n3. **Propose solutions** - Suggest multiple approaches to fix the issue\n4. **Implement fixes** - Apply the best solution with proper error handling\n5. **Add safeguards** - Prevent similar issues in the future\n6. **Test thoroughly** - Ensure the fix works and doesn't break other functionality\n\nConsider:\n- Edge cases and error conditions\n- Performance implications\n- Security considerations\n- Backward compatibility\n- Logging and monitoring\n\nProvide detailed explanations of the debugging process and the reasoning behind the chosen solution.",
      "description": "Advanced debugging with comprehensive issue resolution"
    },
    {
      "name": "write-tests",
      "prompt": "Create comprehensive test suites for the codebase. Include:\n\n1. **Unit Tests** - Test individual functions and methods\n2. **Integration Tests** - Test component interactions\n3. **Edge Cases** - Test boundary conditions and error scenarios\n4. **Mocking** - Properly mock external dependencies\n5. **Test Data** - Create realistic test data sets\n6. **Assertions** - Comprehensive assertions for all scenarios\n7. **Setup/Teardown** - Proper test environment management\n\nFollow best practices:\n- Arrange-Act-Assert pattern\n- Descriptive test names\n- Single responsibility per test\n- Good test coverage\n- Fast and reliable tests\n- Clear failure messages\n\nUse the project's existing testing framework and conventions.",
      "description": "Generate comprehensive test suites with best practices"
    },
    {
      "name": "security-audit",
      "prompt": "Perform a comprehensive security audit of the codebase:\n\n1. **Vulnerability Assessment** - Identify potential security issues\n2. **Input Validation** - Check for proper sanitization and validation\n3. **Authentication & Authorization** - Review access controls\n4. **Data Protection** - Ensure sensitive data is properly handled\n5. **Dependencies** - Check for known vulnerabilities in dependencies\n6. **Configuration Security** - Review security-related settings\n7. **Error Handling** - Ensure errors don't leak sensitive information\n8. **Logging** - Check for information disclosure in logs\n\nProvide:\n- Risk assessment for each finding\n- Specific remediation steps\n- Code examples for fixes\n- Prevention strategies\n- Compliance considerations (if applicable)\n\nFocus on practical, actionable security improvements.",
      "description": "Comprehensive security audit and remediation"
    },
    {
      "name": "performance-optimization",
      "prompt": "Analyze and optimize code performance:\n\n1. **Performance Analysis** - Identify bottlenecks and slow operations\n2. **Algorithm Optimization** - Improve time/space complexity\n3. **Memory Management** - Optimize memory usage and prevent leaks\n4. **Database Optimization** - Improve query performance and indexing\n5. **Caching Strategies** - Implement appropriate caching layers\n6. **Async Operations** - Use asynchronous patterns where beneficial\n7. **Resource Management** - Optimize file I/O, network calls, etc.\n8. **Profiling** - Suggest profiling and monitoring approaches\n\nProvide:\n- Before/after performance comparisons\n- Benchmarking strategies\n- Monitoring recommendations\n- Scalability considerations\n- Trade-offs and limitations\n\nFocus on measurable improvements with clear performance metrics.",
      "description": "Comprehensive performance analysis and optimization"
    },
    {
      "name": "documentation-generator",
      "prompt": "Generate comprehensive documentation for the project:\n\n1. **README.md** - Project overview, setup, and usage\n2. **API Documentation** - Function/class documentation with examples\n3. **Architecture Docs** - System design and component interactions\n4. **Development Guide** - Contributing guidelines and workflows\n5. **Deployment Guide** - Production deployment instructions\n6. **Configuration Reference** - All settings and environment variables\n7. **Troubleshooting** - Common issues and solutions\n8. **Changelog** - Version history and changes\n\nUse clear, concise language with:\n- Code examples\n- Diagrams where helpful\n- Step-by-step instructions\n- Links to external resources\n- Consistent formatting\n\nMake documentation accessible to both beginners and experienced developers.",
      "description": "Generate comprehensive project documentation"
    },
    {
      "name": "code-review",
      "prompt": "Perform a thorough code review focusing on:\n\n1. **Code Quality** - Readability, maintainability, and style\n2. **Best Practices** - Language-specific conventions and patterns\n3. **Architecture** - Design patterns and system organization\n4. **Performance** - Efficiency and optimization opportunities\n5. **Security** - Potential vulnerabilities and secure coding practices\n6. **Testing** - Test coverage and quality\n7. **Documentation** - Code comments and documentation quality\n8. **Dependencies** - External library usage and updates\n\nProvide:\n- Specific, actionable feedback\n- Code examples for improvements\n- Priority levels for issues\n- Positive feedback for good practices\n- Suggestions for refactoring\n- Compliance with project standards\n\nFocus on constructive feedback that improves code quality and team productivity.",
      "description": "Comprehensive code review with actionable feedback"
    },
    {
      "name": "migration-assistant",
      "prompt": "Help migrate code to newer versions or different frameworks:\n\n1. **Version Analysis** - Identify breaking changes and new features\n2. **Migration Planning** - Create step-by-step migration strategy\n3. **Code Updates** - Update code to use new APIs and patterns\n4. **Dependency Updates** - Update and resolve dependency conflicts\n5. **Configuration Changes** - Update configuration files and settings\n6. **Testing Updates** - Update tests for new versions\n7. **Rollback Plan** - Prepare rollback strategy if needed\n8. **Documentation Updates** - Update documentation for changes\n\nProvide:\n- Detailed migration steps\n- Code examples for changes\n- Potential issues and solutions\n- Testing strategies\n- Timeline estimates\n- Risk assessment\n\nEnsure smooth transitions with minimal downtime and issues.",
      "description": "Assist with framework and version migrations"
    }
  ],
  "contextProviders": [
    {
      "name": "codebase-search",
      "params": {}
    },
    {
      "name": "open",
      "params": {}
    },
    {
      "name": "terminal",
      "params": {}
    },
    {
      "name": "git",
      "params": {}
    },
    {
      "name": "diff",
      "params": {}
    },
    {
      "name": "folder",
      "params": {}
    }
  ],
  "tabAutocompleteModel": {
    "title": "CodeLlama 13B (Balanced)",
    "provider": "ollama",
    "model": "codellama:13b",
    "apiBase": "http://localhost:11434"
  },
  "allowAnonymousTelemetry": false,
  "embeddingsProvider": {
    "provider": "ollama",
    "model": "nomic-embed-text"
  },
  "reranker": {
    "name": "none"
  },
  "experimental": {
    "enableCodeLens": true,
    "enableTabAutocomplete": true,
    "enableCodebaseIndexing": true
  }
}
