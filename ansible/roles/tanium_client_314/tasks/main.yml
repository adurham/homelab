---
- import_tasks: setup.yml

- name: Retrieve and parse Tanium Client versions
  block:
    - name: Get Tanium Client versions from API
      uri:
        url: "{{ tanium_server_url }}{{ tanium_client_version_endpoint }}"
        method: POST
        headers:
          session: "{{ tanium_api_token }}"
          Content-Type: "application/json"
        validate_certs: false
        return_content: yes
        timeout: 30
      register: tanium_client_versions_response
      retries: 3
      delay: 10
      until: tanium_client_versions_response.status == 200

    - name: Set required Tanium Client version data
      set_fact:
        selected_tanium_client: "{{ tanium_client_versions_response.json.client_versions | selectattr('version', 'equalto', tanium_client_version) | list | first }}"
      when: tanium_client_versions_response.json.client_versions is defined

    - name: Fail if specified Tanium Client version is not found
      fail:
        msg: "Tanium Client version {{ tanium_client_version }} not found in API response."
      when: selected_tanium_client is not defined

  delegate_to: localhost
  run_once: true

- name: Get Tanium public key if not already downloaded
  block:
    - name: Check if Tanium public key exists locally
      stat:
        path: "/tmp/tanium.pub"
      register: tanium_pub_key

    - name: Download Tanium public key
      uri:
        url: "{{ tanium_server_url }}/api/v2/keys/314"
        method: GET
        headers:
          session: "{{ tanium_api_token }}"
          Content-Type: "application/json"
        validate_certs: false
        return_content: yes
        timeout: 30
      register: tanium_pub_file
      delegate_to: localhost
      when: not tanium_pub_key.stat.exists

    - name: Save Tanium public key locally
      copy:
        content: "{{ tanium_pub_file.content }}"
        dest: "/tmp/tanium.pub"
      when: not tanium_pub_key.stat.exists
  delegate_to: localhost
  run_once: true

- name: Determine architecture and OS support, then download and install if necessary
  block:
    - name: Set architecture suffix and OS platform
      set_fact:
        arch_suffix: "{{ 'x64' if ansible_architecture in ['x86_64', 'amd64', '64-bit'] else 'x86' if ansible_architecture in ['i386', 'i686', '32-bit'] else 'unsupported' }}"
        target_os: "{{ 'windows' if ansible_os_family == 'Windows' else 'unsupported' }}"

    - name: Fail if architecture or OS is unsupported
      fail:
        msg: "Unsupported architecture {{ ansible_architecture }} or OS family {{ ansible_os_family }}."
      when: arch_suffix == "unsupported" or target_os == "unsupported"

    - name: Check if Tanium Client service exists on Windows
      ansible.windows.win_service_info:
        name: "Tanium Client"
      register: tanium_service_info
      when: target_os == 'windows'

    - name: Set executable path from service info
      set_fact:
        tanium_client_exe_path: '{{ tanium_service_info.services[0].path | regex_replace(''^[" ]+|[" ]+$'', '''') }}'
      when:
        - target_os == 'windows'
        - tanium_service_info.services is defined
        - tanium_service_info.services | length > 0
        - tanium_service_info.services[0].path is defined

    - name: Check if Tanium Client version matches
      ansible.windows.win_command: '"{{ tanium_client_exe_path }}" --version'
      register: tanium_client_version_output
      when:
        - target_os == 'windows'
        - tanium_client_exe_path is defined
      changed_when: false

    - name: Set Tanium installation needed flag
      set_fact:
        tanium_needs_install: "{{ tanium_client_version_output.stdout is undefined or (tanium_client_version_output.stdout | default('') | regex_search('\\d+(?:\\.\\d+)+')) != tanium_client_version }}"
      when: target_os == 'windows'

- name: Install Tanium Client if required
  block:
    - name: Create installation directory on Windows
      ansible.windows.win_file:
        path: "{{ tanium_file_dest_windows }}"
        state: directory
      when: target_os == 'windows'

    - name: Download Tanium Client installer if missing
      ansible.windows.win_get_url:
        url: "{{ selected_tanium_client.installers.windows.url }}"
        dest: "{{ tanium_file_dest_windows }}\\{{ selected_tanium_client.installers.windows.filename }}"
        headers:
          User-Agent: "Tanium"
        timeout: 30
      when: target_os == 'windows'
      retries: 3
      delay: 10

    - name: Copy Tanium public key to Windows
      ansible.windows.win_copy:
        src: "/tmp/tanium.pub"
        dest: "{{ tanium_file_dest_windows }}\\tanium.pub"
      when: target_os == 'windows'

    - name: Install Tanium Client
      ansible.windows.win_command: '"{{ tanium_file_dest_windows }}\\SetupClient.exe" /S /ServerAddress {{ tanium_server_address }} /LogVerbosityLevel {{ tanium_log_verbosity }} /KeyPath "{{ tanium_file_dest_windows }}\\tanium.pub"'
      when: target_os == 'windows'

    - name: Set Tanium Client Server Name List
      ansible.windows.win_command: '"{{ selected_tanium_client.installers.windows.executable }}" config set ServerNameList {{ tanium_server_address }}'
      when: target_os == 'windows'

    - name: Start Tanium Client service
      ansible.windows.win_service:
        name: "Tanium Client"
        state: started
      when: target_os == 'windows'

    - name: Cleanup installer and public key
      ansible.windows.win_file:
        path: "{{ tanium_file_dest_windows }}\\{{ selected_tanium_client.installers.windows.filename }}"
        state: absent
      when: target_os == 'windows'

  when: tanium_needs_install

- name: Verify installation and service status
  block:
    - name: Assert Tanium Client version matches expected
      assert:
        that:
          - tanium_client_version_output.stdout | default('') | regex_search("\\d+(?:\\.\\d+)+") == tanium_client_version
        fail_msg: "Expected Tanium Client version {{ tanium_client_version }} but found {{ tanium_client_version_output.stdout | default('none') }}"
      when: 
        - target_os == 'windows'
        - tanium_client_exe_path is defined

    - name: Check Tanium Client service status on Windows
      ansible.windows.win_service_info:
        name: "Tanium Client"
      register: tanium_service_info_post
      when: target_os == 'windows'

    - name: Assert Tanium Client service is running
      assert:
        that:
          - tanium_service_info_post.services[0].state in ['running', 'started']
        fail_msg: "Tanium Client service is not running."
      when:
        - target_os == 'windows'
        - tanium_service_info_post.services is defined
        - tanium_service_info_post.services | length > 0

  when: tanium_needs_install