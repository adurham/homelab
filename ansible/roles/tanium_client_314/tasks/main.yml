---
- import_tasks: setup.yml

- name: Retrieve and parse Tanium Client versions
  block:
    - name: Get Tanium Client versions from API
      uri:
        url: "{{ tanium_server_url }}{{ tanium_client_version_endpoint }}"
        method: POST
        headers:
          session: "{{ tanium_api_token }}"
          Content-Type: "application/json"
        validate_certs: false
        return_content: yes
        timeout: 30
      register: tanium_client_versions_response
      retries: 3
      delay: 10
      until: tanium_client_versions_response.status == 200

    - name: Save full client version data for specified version
      set_fact:
        selected_tanium_client_version_data: "{{ tanium_client_versions_response.json.client_versions | selectattr('version', 'equalto', tanium_client_version) | list | first }}"
      when: tanium_client_versions_response.json.client_versions is defined

    - name: Fail if specified Tanium Client version is not found
      fail:
        msg: "Tanium Client version {{ tanium_client_version }} not found in API response."
      when: selected_tanium_client_version_data is not defined

  delegate_to: localhost
  run_once: true

- name: Get Tanium public key if not already downloaded
  block:
    - name: Check if Tanium public key exists locally
      stat:
        path: "/tmp/tanium.pub"
      register: tanium_pub_key

    - name: Download Tanium public key
      uri:
        url: "{{ tanium_server_url }}/api/v2/keys/314"
        method: GET
        headers:
          session: "{{ tanium_api_token }}"
          Content-Type: "application/json"
        validate_certs: false
        return_content: yes
        timeout: 30
      register: tanium_pub_file
      delegate_to: localhost
      when: not tanium_pub_key.stat.exists

    - name: Save Tanium public key locally
      copy:
        content: "{{ tanium_pub_file.content }}"
        dest: "/tmp/tanium.pub"
      when: not tanium_pub_key.stat.exists
  delegate_to: localhost
  run_once: true

- name: Determine architecture and OS support
  block:
    - name: Determine architecture and OS support, then download and install if necessary
      block:
        - name: Set architecture suffix and OS platform
          set_fact:
            arch_suffix: "{{ 'x64' if ansible_architecture in ['x86_64', 'amd64', '64-bit'] else 'x86' if ansible_architecture in ['i386', 'i686', '32-bit'] else 'unsupported' }}"
            target_os: >-
              {%- if ansible_os_family == 'Windows' -%}
                windows
              {%- elif ansible_os_family == 'RedHat' and ansible_distribution in ['CentOS', 'RedHat', 'Amazon', 'Oracle'] -%}
                linux
              {%- elif ansible_os_family == 'Debian' and ansible_distribution in ['Debian', 'Ubuntu'] -%}
                linux
              {%- elif ansible_distribution == 'OpenSUSE' -%}
                linux
              {%- else -%}
                unsupported
              {%- endif -%}

    - name: Fail if architecture or OS is unsupported
      fail:
        msg: "Unsupported architecture {{ ansible_architecture }} or OS family {{ ansible_os_family }}."
      when: arch_suffix == "unsupported" or target_os == "unsupported"

    - name: Check if Tanium Client is installed on Windows
      block:
        - name: Check if Tanium Client service exists
          ansible.windows.win_service_info:
            name: "Tanium Client"
          register: tanium_service_info

        - name: Set executable path from service info
          set_fact:
            tanium_client_exe_path: '{{ tanium_service_info.services[0].path | regex_replace(''^[" ]+|[" ]+$'', '''') }}'
          when:
            - tanium_service_info.services is defined
            - tanium_service_info.services | length > 0
            - tanium_service_info.services[0].path is defined

        - name: Check if Tanium Client version matches
          ansible.windows.win_command: '"{{ tanium_client_exe_path }}" --version'
          register: tanium_client_version_output
          when:
            - tanium_client_exe_path is defined
          changed_when: false

        - name: Set Tanium installation needed flag
          set_fact:
            tanium_needs_install: "{{ tanium_client_version_output.stdout is undefined or (tanium_client_version_output.stdout | default('') | regex_search('\\d+(?:\\.\\d+)+')) != tanium_client_version }}"

      when: target_os == 'windows'

    - name: Check if Tanium Client is installed on Linux
      block:
        - name: Check if Tanium Client binary exists
          stat:
            path: "/opt/Tanium/TaniumClient/TaniumClient"
          register: tanium_client_binary

        - name: Retrieve Tanium Client version if installed
          command: "{{ tanium_client_binary.stat.path }} --version"
          register: tanium_client_version_output
          when:
            - tanium_client_binary.stat.exists
          changed_when: false

        - name: Set Tanium installation needed flag based on version check
          set_fact:
            tanium_needs_install: "{{ tanium_client_version_output.stdout | default('') | regex_search('\\d+(?:\\.\\d+)+') != tanium_client_version }}"

      when: target_os == 'linux'

- name: Install Tanium Client if required on Windows
  block:
    - name: Create installation directory on Windows
      ansible.windows.win_file:
        path: "{{ tanium_file_dest_windows }}"
        state: directory

    - name: Set installer details for target OS
      set_fact:
        tanium_installer_url: "{{ tanium_server_url }}/cache/{{ selected_tanium_client_version_data.installers.windows.hash }}"
        tanium_installer_filename: "{{ selected_tanium_client_version_data.installers.windows.filename }}"
        tanium_installer_hash: "{{ selected_tanium_client_version_data.installers.windows.hash }}"

    - name: Download Tanium Client installer for each host on localhost
      get_url:
        url: "{{ tanium_installer_url }}"
        dest: "/tmp/{{ tanium_installer_filename }}"
        mode: "0644"
        headers:
          session: "{{ tanium_api_token }}"
        timeout: 30
        validate_certs: false
      delegate_to: localhost

    - name: Copy Tanium Client installer to Windows target
      ansible.windows.win_copy:
        src: "/tmp/{{ tanium_installer_filename }}"
        dest: "{{ tanium_file_dest_windows }}\\{{ tanium_installer_filename }}"

    - name: Copy Tanium public key to Windows
      ansible.windows.win_copy:
        src: "/tmp/tanium.pub"
        dest: "{{ tanium_file_dest_windows }}\\tanium.pub"

    - name: Install Tanium Client
      ansible.windows.win_command: '"{{ tanium_file_dest_windows }}\\{{ tanium_installer_filename }}" /S /ServerAddress={{ tanium_server_address }} /LogVerbosityLevel={{ tanium_log_verbosity }} /KeyPath="{{ tanium_file_dest_windows }}\\tanium.pub"'

    - name: Check if Tanium Client service exists on Windows
      ansible.windows.win_service_info:
        name: "Tanium Client"
      register: tanium_service_info

    - name: Set executable path from service info
      set_fact:
        tanium_client_exe_path: '{{ tanium_service_info.services[0].path | regex_replace(''^[" ]+|[" ]+$'', '''') }}'
      when:
        - tanium_service_info.services is defined
        - tanium_service_info.services | length > 0
        - tanium_service_info.services[0].path is defined

    - name: Check if Tanium Client version matches
      ansible.windows.win_command: '"{{ tanium_client_exe_path }}" --version'
      register: tanium_client_version_output
      when:
        - tanium_client_exe_path is defined
      changed_when: false

    - name: Start Tanium Client service
      ansible.windows.win_service:
        name: "Tanium Client"
        state: started

    - name: Cleanup installer and public key
      block:
        - name: Remove Tanium Client installer
          ansible.windows.win_file:
            path: "{{ tanium_file_dest_windows }}\\{{ tanium_installer_filename }}"
            state: absent

        - name: Remove Tanium public key
          ansible.windows.win_file:
            path: "{{ tanium_file_dest_windows }}\\tanium.pub"
            state: absent

  when:
    - tanium_needs_install
    - target_os == 'windows'

- name: Install Tanium Client if required on Linux
  block:
    - name: Construct dynamic architecture suffix
      set_fact:
        arch_suffix: "{{ ansible_distribution | lower }}{{ ansible_distribution_major_version }}-{{ 'x64' if ansible_architecture in ['x86_64', 'amd64'] else 'x86' }}"

    - name: Adjust arch_suffix for Debian 10, 11, and 12 if not explicitly supported
      set_fact:
        arch_suffix: "debian9-x64"
      when: arch_suffix in ["debian10-x64", "debian11-x64", "debian12-x64"] and "debian9-x64" in selected_tanium_client_version_data.installers

    - name: Check if final arch_suffix is supported
      fail:
        msg: "Unsupported architecture or OS detected: {{ arch_suffix }}"
      when: arch_suffix not in selected_tanium_client_version_data.installers

    - name: Set installer details for Tanium
      set_fact:
        tanium_installer_url: "{{ tanium_server_url }}/cache/{{ selected_tanium_client_version_data.installers[arch_suffix].hash }}"
        tanium_installer_filename: "{{ selected_tanium_client_version_data.installers[arch_suffix].filename }}"
        tanium_installer_hash: "{{ selected_tanium_client_version_data.installers[arch_suffix].hash }}"

    - name: Download Tanium Client installer for each host on localhost
      get_url:
        url: "{{ tanium_installer_url }}"
        dest: "{{ tanium_file_dest_linux }}/{{ tanium_installer_filename }}"
        mode: "0644"
        headers:
          session: "{{ tanium_api_token }}"
        timeout: 30
        validate_certs: false
      delegate_to: localhost

    - name: Copy Tanium Client installer to Linux target
      copy:
        src: "/tmp/{{ tanium_installer_filename }}"
        dest: "{{ tanium_file_dest_linux }}/{{ tanium_installer_filename }}"

    - name: Copy Tanium public key to Linux
      copy:
        src: "/tmp/tanium.pub"
        dest: "{{ tanium_file_dest_linux }}/tanium.pub"

    - name: Install Tanium Client on Debian-based systems
      apt:
        deb: "{{ tanium_file_dest_linux }}/{{ tanium_installer_filename }}"
        state: present
      when:
        - ansible_os_family == 'Debian'
        - ansible_distribution in ['Debian', 'Ubuntu']

    - name: Install Tanium Client on RedHat-based systems (RedHat, CentOS, Oracle, Amazon Linux)
      yum:
        name: "{{ tanium_file_dest_linux }}/{{ tanium_installer_filename }}"
        state: present
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution in ['RedHat', 'CentOS', 'OracleLinux', 'Amazon']

    - name: Install Tanium Client on OpenSUSE
      zypper:
        name: "{{ tanium_file_dest_linux }}/{{ tanium_installer_filename }}"
        state: present
      when:
        - ansible_distribution == 'OpenSUSE'

    - name: Move tanium.pub file to the TaniumClient directory
      copy:
        src: "{{ tanium_file_dest_linux }}/tanium.pub"
        dest: "/opt/Tanium/TaniumClient/tanium.pub"
        owner: root
        group: root
        mode: '0644'

    - name: Configure TaniumClient server
      command: "/opt/Tanium/TaniumClient/TaniumClient config set ServerName {{ tanium_server_address }}"

    - name: Start Tanium Client service on Linux
      shell: "{{ selected_tanium_client_version_data.installers[arch_suffix].start_service_command }}"

    - name: Cleanup installer and public key on Linux
      block:
        - name: Remove Tanium Client installer
          file:
            path: "{{ tanium_file_dest_linux }}/{{ tanium_installer_filename }}"
            state: absent
        - name: Remove Tanium public key from temporary location
          file:
            path: "{{ tanium_file_dest_linux }}/tanium.pub"
            state: absent

  when:
    - tanium_needs_install
    - target_os == 'linux'

- name: Verify installation and service status
  block:
    - name: Verify installation and service status on Windows
      block:
        - name: Assert Tanium Client version matches expected
          assert:
            that:
              - tanium_client_version_output.stdout | default('') | regex_search("\\d+(?:\\.\\d+)+") == tanium_client_version
            fail_msg: "Expected Tanium Client version {{ tanium_client_version }} but found {{ tanium_client_version_output.stdout | default('none') }}"
          when:
            - target_os == 'windows'
            - tanium_client_exe_path is defined

        - name: Check Tanium Client service status on Windows
          ansible.windows.win_service_info:
            name: "Tanium Client"
          register: tanium_service_info_post
          when: target_os == 'windows'

        - name: Assert Tanium Client service is running
          assert:
            that:
              - tanium_service_info_post.services[0].state in ['running', 'started']
            fail_msg: "Tanium Client service is not running."
          when:
            - target_os == 'windows'
            - tanium_service_info_post.services is defined
            - tanium_service_info_post.services | length > 0

      when:
        - tanium_needs_install
        - target_os == 'windows'

    - name: Verify installation and service status on Linux
      block:
        - name: Assert Tanium Client version matches expected on Linux
          assert:
            that:
              - tanium_client_version_output.stdout | default('') | regex_search("\\d+(?:\\.\\d+)+") == tanium_client_version
            fail_msg: "Expected Tanium Client version {{ tanium_client_version }} but found {{ tanium_client_version_output.stdout | default('none') }}"
          when:
            - tanium_client_binary.stat.exists

        - name: Set service status command
          set_fact:
            status_service_command: "{{ selected_tanium_client_version_data.installers[arch_suffix].start_service_command | regex_replace('start', 'status') }}"
          when: target_os == 'linux'

        - name: Verify Tanium Client service status on Linux
          shell: "{{ status_service_command }}"
          register: tanium_service_status
          ignore_errors: true
          changed_when: false

        - name: Assert Tanium Client service is running on Linux
          assert:
            that:
              - tanium_service_status.rc == 0
            fail_msg: "Tanium Client service is not running as expected on Linux."

      when:
        - tanium_needs_install
        - target_os == 'linux'
