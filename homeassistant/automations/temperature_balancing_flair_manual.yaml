# Occupancy-Based Temperature Balancing System (Corrected for Flair Manual Mode)
# Directly controls Flair vents for optimal temperature balancing

- id: 'temperature_balancing_corrected'
  alias: 'Temperature Balancing - Flair Manual Control'
  description: 'Occupancy-based temperature balancing with direct Flair vent control'
  triggers:
    # Trigger when occupancy changes
    - platform: state
      entity_id:
        - binary_sensor.kitchen_occupancy
        - binary_sensor.kitchen_occupancy_2
        - binary_sensor.living_room_occupancy
        - binary_sensor.main_bedroom_occupancy
        - binary_sensor.guest_bedroom_1_occupancy
        - binary_sensor.guest_bedroom_2_occupancy
        - binary_sensor.main_bathroom_occupancy
        - binary_sensor.guest_bathroom_occupancy
        - binary_sensor.half_bathroom_occupancy
        - binary_sensor.dining_room_occupancy
        - binary_sensor.game_room_occupancy
        - binary_sensor.cat_room_occupancy
        - binary_sensor.laundry_room_occupancy
        - binary_sensor.hallway_occupancy
        - binary_sensor.edgewater_road_occupancy
      id: occupancy_changed
    # Trigger when temperature changes significantly
    - platform: numeric_state
      entity_id:
        - climate.half_bathroom_room
        - climate.main_bathroom_room_2
        - climate.guest_bathroom_room_2
        - climate.cat_room_room
        - climate.guest_bedroom_2_room_2
        - climate.game_room_room
        - climate.guest_bedroom_1_room
        - climate.living_room_room_3
        - climate.main_bedroom_room_2
        - climate.hallway_room_3
        - climate.dining_room_room_2
        - climate.laundry_room_room_2
        - climate.kitchen_room_3
        - climate.edgewater_road_structure
      attribute: current_temperature
      for:
        minutes: 5
      id: temperature_changed
    # Periodic check every 15 minutes
    - platform: time_pattern
      minutes: '/15'
      id: periodic_check
  action:
    - service: system_log.write
      data:
        message: 'Starting temperature balancing cycle'
        level: info
    # Get ecobee setpoint as our target
    - variables:
        ecobee_temp: '{{ state_attr("climate.ecobee_thermostat", "temperature") }}'
        ecobee_mode: '{{ states("climate.ecobee_thermostat") }}'
    - service: system_log.write
      data:
        message: 'Ecobee: {{ ecobee_mode }} mode, target: {{ ecobee_temp }}°F'
        level: info
    # Balance all rooms based on occupancy
    - service: script.balance_all_rooms
      data:
        target_temp: '{{ ecobee_temp }}'
    - service: system_log.write
      data:
        message: 'Temperature balancing cycle completed'
        level: info
  mode: restart

# Balance all rooms script
- id: 'balance_all_rooms'
  alias: 'Balance All Rooms Script'
  description: 'Balances all rooms based on occupancy and target temperature'
  fields:
    target_temp:
      description: 'Target temperature from ecobee'
      example: 72
  script:
    balance_all_rooms:
      alias: 'Balance All Rooms'
      sequence:
        - service: system_log.write
          data:
            message: 'Balancing all rooms to {{ target_temp }}°F'
            level: info
        # Kitchen
        - service: script.balance_room
          data:
            room_entity: 'climate.kitchen_room_3'
            room_name: 'Kitchen'
            occupancy_sensor: 'binary_sensor.kitchen_occupancy'
            target_temp: '{{ target_temp }}'
        # Living Room
        - service: script.balance_room
          data:
            room_entity: 'climate.living_room_room_3'
            room_name: 'Living Room'
            occupancy_sensor: 'binary_sensor.living_room_occupancy'
            target_temp: '{{ target_temp }}'
        # Main Bedroom
        - service: script.balance_room
          data:
            room_entity: 'climate.main_bedroom_room_2'
            room_name: 'Main Bedroom'
            occupancy_sensor: 'binary_sensor.main_bedroom_occupancy'
            target_temp: '{{ target_temp }}'
        # Guest Bedroom 1
        - service: script.balance_room
          data:
            room_entity: 'climate.guest_bedroom_1_room'
            room_name: 'Guest Bedroom 1'
            occupancy_sensor: 'binary_sensor.guest_bedroom_1_occupancy'
            target_temp: '{{ target_temp }}'
        # Guest Bedroom 2
        - service: script.balance_room
          data:
            room_entity: 'climate.guest_bedroom_2_room_2'
            room_name: 'Guest Bedroom 2'
            occupancy_sensor: 'binary_sensor.guest_bedroom_2_occupancy'
            target_temp: '{{ target_temp }}'
        # Main Bathroom
        - service: script.balance_room
          data:
            room_entity: 'climate.main_bathroom_room_2'
            room_name: 'Main Bathroom'
            occupancy_sensor: 'binary_sensor.main_bathroom_occupancy'
            target_temp: '{{ target_temp }}'
        # Guest Bathroom
        - service: script.balance_room
          data:
            room_entity: 'climate.guest_bathroom_room_2'
            room_name: 'Guest Bathroom'
            occupancy_sensor: 'binary_sensor.guest_bathroom_occupancy'
            target_temp: '{{ target_temp }}'
        # Half Bathroom
        - service: script.balance_room
          data:
            room_entity: 'climate.half_bathroom_room'
            room_name: 'Half Bathroom'
            occupancy_sensor: 'binary_sensor.half_bathroom_occupancy'
            target_temp: '{{ target_temp }}'
        # Dining Room
        - service: script.balance_room
          data:
            room_entity: 'climate.dining_room_room_2'
            room_name: 'Dining Room'
            occupancy_sensor: 'binary_sensor.dining_room_occupancy'
            target_temp: '{{ target_temp }}'
        # Game Room
        - service: script.balance_room
          data:
            room_entity: 'climate.game_room_room'
            room_name: 'Game Room'
            occupancy_sensor: 'binary_sensor.game_room_occupancy'
            target_temp: '{{ target_temp }}'
        # Cat Room
        - service: script.balance_room
          data:
            room_entity: 'climate.cat_room_room'
            room_name: 'Cat Room'
            occupancy_sensor: 'binary_sensor.cat_room_occupancy'
            target_temp: '{{ target_temp }}'
        # Laundry Room
        - service: script.balance_room
          data:
            room_entity: 'climate.laundry_room_room_2'
            room_name: 'Laundry Room'
            occupancy_sensor: 'binary_sensor.laundry_room_occupancy'
            target_temp: '{{ target_temp }}'
        # Hallway
        - service: script.balance_room
          data:
            room_entity: 'climate.hallway_room_3'
            room_name: 'Hallway'
            occupancy_sensor: 'binary_sensor.hallway_occupancy'
            target_temp: '{{ target_temp }}'
        # Edgewater Road Structure
        - service: script.balance_room
          data:
            room_entity: 'climate.edgewater_road_structure'
            room_name: 'Edgewater Road Structure'
            occupancy_sensor: 'binary_sensor.edgewater_road_occupancy'
            target_temp: '{{ target_temp }}'

# Individual room balancing script
- id: 'balance_room'
  alias: 'Balance Room Script'
  description: 'Balances individual room based on occupancy'
  fields:
    room_entity:
      description: 'Climate entity for the room'
      example: 'climate.kitchen_room_3'
    room_name:
      description: 'Human-readable room name'
      example: 'Kitchen'
    occupancy_sensor:
      description: 'Occupancy sensor for the room'
      example: 'binary_sensor.kitchen_occupancy'
    target_temp:
      description: 'Target temperature from ecobee'
      example: 72
  script:
    balance_room:
      alias: 'Balance Room'
      sequence:
        # Check if room is occupied
        - variables:
            is_occupied: '{{ is_state(occupancy_sensor, "on") }}'
        # Get current room temperature
        - variables:
            current_temp: '{{ state_attr(room_entity, "current_temperature") }}'
        # Calculate temperature difference
        - variables:
            temp_diff: '{{ (current_temp | float) - (target_temp | float) }}'
        # Log current status
        - service: system_log.write
          data:
            message: '{{ room_name }}: {{ current_temp }}°F (target: {{ target_temp }}°F, diff: {{ temp_diff | round(1) }}°F, occupied: {{ is_occupied }})'
            level: info
        # Set room temperature based on occupancy
        - choose:
            # Occupied room - set to exact target temperature
            - conditions:
                - condition: template
                  value_template: '{{ is_occupied }}'
              sequence:
                - service: system_log.write
                  data:
                    message: '{{ room_name }} is occupied - setting to target {{ target_temp }}°F'
                    level: info
                - service: climate.set_temperature
                  target:
                    entity_id: '{{ room_entity }}'
                  data:
                    temperature: '{{ target_temp }}'
                # Ensure HVAC mode matches ecobee
                - service: climate.set_hvac_mode
                  target:
                    entity_id: '{{ room_entity }}'
                  data:
                    hvac_mode: '{{ states("climate.ecobee_thermostat") }}'
            # Unoccupied room - allow drift from target
            - sequence:
                - service: system_log.write
                  data:
                    message: '{{ room_name }} is unoccupied - allowing drift from target'
                    level: info
                # Only adjust if significantly off target (more than 3°F)
                - choose:
                    - conditions:
                        - condition: template
                          value_template: '{{ temp_diff < -3 }}'
                      sequence:
                        - service: system_log.write
                          data:
                            message: '{{ room_name }} is {{ temp_diff | round(1) }}°F below target - gentle heating'
                            level: info
                        - service: climate.set_temperature
                          target:
                            entity_id: '{{ room_entity }}'
                          data:
                            temperature: '{{ (target_temp | float) - 1 }}'
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: '{{ room_entity }}'
                          data:
                            hvac_mode: heat
                    - conditions:
                        - condition: template
                          value_template: '{{ temp_diff > 3 }}'
                      sequence:
                        - service: system_log.write
                          data:
                            message: '{{ room_name }} is {{ temp_diff | round(1) }}°F above target - gentle cooling'
                            level: info
                        - service: climate.set_temperature
                          target:
                            entity_id: '{{ room_entity }}'
                          data:
                            temperature: '{{ (target_temp | float) + 1 }}'
                        - service: climate.set_hvac_mode
                          target:
                            entity_id: '{{ room_entity }}'
                          data:
                            hvac_mode: cool
                    - sequence:
                        - service: system_log.write
                          data:
                            message: '{{ room_name }} is within 3°F of target - no adjustment needed'
                            level: info

# Manual temperature balancing trigger
- id: 'manual_temperature_balance'
  alias: 'Manual Temperature Balance'
  description: 'Manually trigger temperature balancing for testing'
  triggers:
    - platform: event
      event_type: manual_temperature_balance
  action:
    - service: system_log.write
      data:
        message: 'Manual temperature balancing triggered'
        level: info
    - service: automation.trigger
      target:
        entity_id: automation.temperature_balancing_corrected
  mode: single

# Occupancy change notifications
- id: 'occupancy_notifications'
  alias: 'Occupancy Change Notifications'
  description: 'Logs when occupancy changes in important rooms'
  triggers:
    - platform: state
      entity_id:
        - binary_sensor.kitchen_occupancy
        - binary_sensor.living_room_occupancy
        - binary_sensor.main_bedroom_occupancy
      from: 'off'
      to: 'on'
      id: room_occupied
    - platform: state
      entity_id:
        - binary_sensor.kitchen_occupancy
        - binary_sensor.living_room_occupancy
        - binary_sensor.main_bedroom_occupancy
      from: 'on'
      to: 'off'
      id: room_unoccupied
  action:
    - choose:
        - conditions:
            - condition: trigger
              id: room_occupied
          sequence:
            - service: system_log.write
              data:
                message: '{{ trigger.to_state.attributes.friendly_name }} is now occupied - will balance to target temperature'
                level: info
        - conditions:
            - condition: trigger
              id: room_unoccupied
          sequence:
            - service: system_log.write
              data:
                message: '{{ trigger.to_state.attributes.friendly_name }} is now unoccupied - will allow drift from target'
                level: info
  mode: single
